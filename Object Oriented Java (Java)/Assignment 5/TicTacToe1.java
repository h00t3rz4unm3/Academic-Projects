
/**
 * Created by alexandrugutu on 3/14/14.
 */

/**
 *

 Due date is 3/22 at midnight. Cutoff date is 3/25 at midnight

 1) Create a simple tic-tac-toe game. Create a double array (2 dimensional
 array) of type char to store the state of the tic-tac-toe board. (Each square
 has an 'X' and 'O' or is blank). Use JOptionPane to ask the user to pick a
 square. The input should be a single digit, “1” for the top left corner, “2”
 for top center square, “3” for top right square, etc. Use a loop to keep
 asking for the next move until the board is filled or until someone has one.
 You will have to create a way to check if a player won. Make this a separate
 method. There is a straighforward and thorough way to check and there is a more
 efficient way. Try to identify both and encode the more efficient way. If the
 user inputs a square that has already been picked or if it is an invalid entry,
 the user should be prompted for a different square. After each move, print out
 the current state of the board to the console. Call this class TTT1 or TicTacToe1,
 if you prefer.

 2) Create another tic-tac-toe game. This version will be mostly the same as
 the previous one.  However: In the 1st version, the user submitted moves for
 both X and O. In this version, the user will only be asked the moves for X.
 Moves for O will be generated by the program. Before making a move for O,
 the program should check to see if X could win on its next turn, and if so,
 O should move to block. (Hint: use the method you created in part 1 to test
 for a win).  Otherwise, O should pick an available square at random. (Use
 the random function in class Math.

 *
 */

// Questions:
// How to make it force retype for the user if spot is already taken
// How to stop the program from crashing when nothing is entered

import javax.swing.*;

public class TicTacToe1
{
	private char[][] board;
	private int[][] intboard;
	private int[] input;

	public TicTacToe1()
	{
		board = new char[3][3];
		intboard = new int[3][3];
	}

	public void userInput()
	{
		int input;
		int counter = 0;
		while (counter < 9)
		{
			while (counter % 2 == 0)
			{
				input = Integer.parseInt(JOptionPane.showInputDialog(null, "Please input the location for X: "));
				input = input - 1;

				if (verifyInput(input))
				{
					if (isEmpty(input))
					{
						board[input / 3][input % 3] = 'X';
						if (checkWinner())
						{
							JOptionPane.showMessageDialog(null, "The Winner is X!");
							System.exit(0);
						}
						counter++;
						printBoard();
					}
				}
				else if (!verifyInput(input))
				{
					JOptionPane.showMessageDialog(null, "The location you entered is incorrect");
				}
				else
				{
					JOptionPane.showMessageDialog(null, "The location you entered is already taken by " + board[input / 3][input % 3]);
				}
			}

			while (counter % 2 != 0)
			{
				input = Integer.parseInt(JOptionPane.showInputDialog(null, "Please input the location for O: "));
				input = input - 1;
				if (verifyInput(input))
				{
					if (isEmpty(input))
					{
						board[input / 3][input % 3] = 'O';
						intboard[input / 3][input % 3] = input;
						if (checkWinner()) {
							JOptionPane.showMessageDialog(null, "The Winner is O!");
							System.exit(0);
						}
						counter++;
						printBoard();
					}
					else
					{
						JOptionPane.showMessageDialog(null, "The location you entered is already taken by " + board[input / 3][input % 3]);
					}
				}
				else if (!verifyInput(input))
				{
					JOptionPane.showMessageDialog(null, "The location you entered is incorrect");
				}
			}

			if (counter == 9)
			{
				JOptionPane.showMessageDialog(null, "The game is a tie!");
				System.exit(0);
			}

		}
	}

	public boolean isEmpty(int userinput)
	{
		if (board[userinput / 3][userinput % 3] == 'X' || board[userinput / 3][userinput % 3] == 'O')
		{
			return false;
		}
		else
		{
			return true;
		}
	}

	public boolean verifyInput(int userinput)
	{
		if (userinput < 0 || userinput > 8)
		{
			return false;
		}
		else
		{
			return true;
		}
	}

	public void printBoard()
	{
		for (int row = 0; row < 3; ++row)
		{
			for (int col = 0; col < 3; ++col)
			{
				System.out.print(" " + board[row][col] + " ");
				if (col != 3 - 1)
                {
					System.out.print("|");
				}
			}
			System.out.println();
			if (row != 3 - 1)
            {
				System.out.println("-----------");
			}
		}
		System.out.println();
	}

	public boolean checkWinner()
	{
		boolean winner = false;
		// Row Checks
		if ((board[0][0] == 'X' && board[0][1] == 'X' && board[0][2] == 'X') || (board[0][0] == 'O' && board[0][1] == 'O' && board[0][2] == 'O'))
		{
			winner = true;
		}
		else if ((board[1][0] == 'X' && board[1][1] == 'X' && board[1][2] == 'X') || (board[1][0] == 'O' && board[1][1] == 'O' && board[1][2] == 'O'))
		{
			winner = true;
		}
		else if ((board[2][0] == 'X' && board[2][1] == 'X' && board[2][2] == 'X') || (board[2][0] == 'O' && board[2][1] == 'O' && board[2][2] == 'O'))
		{
			winner = true;
		}
		// Column Checks
		else if ((board[0][0] == 'X' && board[1][0] == 'X' && board[2][0] == 'X') || (board[0][0] == 'O' && board[1][0] == 'O' && board[2][0] == 'O'))
		{
			winner = true;
		}
		else if ((board[0][1] == 'X' && board[1][1] == 'X' && board[2][1] == 'X') || (board[0][0] == 'O' && board[1][1] == 'O' && board[2][1] == 'O'))
		{
			winner = true;
		}
		else if ((board[0][2] == 'X' && board[1][2] == 'X' && board[2][2] == 'X') || (board[0][2] == 'O' && board[1][2] == 'O' && board[2][2] == 'O'))
		{
			winner = true;
		}
		// Diagonal Checks
		else if ((board[0][0] == 'X' && board[1][1] == 'X' && board[2][2] == 'X') || (board[1][0] == 'O' && board[1][1] == 'O' && board[2][2] == 'O'))
		{
			winner = true;
		}
		else if ((board[0][2] == 'X' && board[1][1] == 'X' && board[2][0] == 'X') || (board[0][2] == 'O' && board[1][1] == 'O' && board[2][0] == 'O'))
		{
			winner = true;
		}
		return winner;
	}

	

}

