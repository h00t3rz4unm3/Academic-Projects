int   : Keyword_int
x1   : Id
,   : Comma
x2   : Id
,   : Comma
x3   : Id
;   : semiColon
int   : Keyword_int
[   : LBracket
10   : Int
:   : Colon
20   : Int
,   : Comma
0   : Int
:   : Colon
10   : Int
,   : Comma
-10   : Int
:   : Colon
-5   : Int
]   : RBracket
a1   : Id
,   : Comma
a2   : Id
,   : Comma
a3   : Id
;   : semiColon
float   : Keyword_float
y1   : Id
,   : Comma
y2   : Id
,   : Comma
y3   : Id
;   : semiColon
float   : Keyword_float
[   : LBracket
10   : Int
:   : Colon
20   : Int
,   : Comma
0   : Int
:   : Colon
10   : Int
,   : Comma
-10   : Int
:   : Colon
-5   : Int
]   : RBracket
b1   : Id
,   : Comma
b2   : Id
,   : Comma
b3   : Id
;   : semiColon
boolean   : Keyword_boolean
c1   : Id
,   : Comma
c2   : Id
,   : Comma
c3   : Id
;   : semiColon
boolean   : Keyword_boolean
[   : LBracket
10   : Int
:   : Colon
20   : Int
,   : Comma
0   : Int
:   : Colon
10   : Int
,   : Comma
-10   : Int
:   : Colon
-5   : Int
]   : RBracket
c1   : Id
,   : Comma
c2   : Id
,   : Comma
c3   : Id
;   : semiColon
int   : Keyword_int
i   : Id
,   : Comma
j   : Id
,   : Comma
k   : Id
;   : semiColon
{   : LBrace
x1   : Id
=   : Eq
10   : Int
;   : semiColon
x2   : Id
=   : Eq
20   : Int
;   : semiColon
x3   : Id
=   : Eq
(   : LParen
+   : Add
x1   : Id
x2   : Id
)   : RParen
;   : semiColon
i   : Id
=   : Eq
10   : Int
;   : semiColon
while   : Keyword_while
(   : LParen
<=   : Le
i   : Id
20   : Int
)   : RParen
{   : LBrace
j   : Id
=   : Eq
0   : Int
;   : semiColon
while   : Keyword_while
(   : LParen
<=   : Le
j   : Id
10   : Int
)   : RParen
{   : LBrace
k   : Id
=   : Eq
-10   : Int
;   : semiColon
while   : Keyword_while
(   : LParen
<=   : Le
k   : Id
-5   : Int
)   : RParen
{   : LBrace
a1   : Id
[   : LBracket
i   : Id
,   : Comma
j   : Id
,   : Comma
k   : Id
]   : RBracket
=   : Eq
(   : LParen
+   : Add
(   : LParen
+   : Add
i   : Id
j   : Id
)   : RParen
k   : Id
)   : RParen
;   : semiColon
print   : Keyword_print
a1   : Id
[   : LBracket
i   : Id
,   : Comma
j   : Id
,   : Comma
k   : Id
]   : RBracket
;   : semiColon
k   : Id
=   : Eq
(   : LParen
+   : Add
k   : Id
1   : Int
)   : RParen
;   : semiColon
}   : RBrace
j   : Id
=   : Eq
(   : LParen
+   : Add
j   : Id
1   : Int
)   : RParen
;   : semiColon
}   : RBrace
i   : Id
=   : Eq
(   : LParen
+   : Add
i   : Id
1   : Int
)   : RParen
;   : semiColon
}   : RBrace
}   : RBrace
