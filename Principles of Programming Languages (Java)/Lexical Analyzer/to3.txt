int   : Keyword_int
a1   : Id
,   : Comma
a2   : Id
,   : Comma
a3   : Id
;   : Semicolon
float   : Keyword_float
x1   : Id
,   : Comma
x3   : Id
;   : Semicolon
{   : LBrace
if   : Keyword_if
(   : LParen
<   : Lt
a   : Id
_ : Lexical Error, invalid token
1   : Int
a2   : Id
)   : RParen
a1   : Id
=   : Eq
(   : LParen
+   : Add
+123   : Int
-76   : Int
)   : RParen
;   : Semicolon
else   : Keyword_else
if   : Keyword_if
(   : LParen
&   : And
(   : LParen
<=   : Le
x1   : Id
x3   : Id
)   : RParen
(   : LParen
>   : Gt
a3   : Id
a1   : Id
)   : RParen
)   : RParen
x1   : Id
=   : Eq
(   : LParen
-   : Sub
(   : LParen
/   : Div
7.   : Float
.78   : Float
)   : RParen
(   : LParen
*   : Mul
+.  : Lexical Error, invalid token
-.) : Lexical Error, invalid token
)   : RParen
;   : Semicolon
else   : Keyword_else
if   : Keyword_if
(   : LParen
|   : Or
(   : LParen
<   : Lt
x1   : Id
x3   : Id
)   : RParen
(   : LParen
>=   : Ge
a3   : Id
a1   : Id
)   : RParen
)   : RParen
x3   : Id
=   : Eq
(   : LParen
-   : Sub
(   : LParen
/   : Div
87.54   : Float
.5E6   : FloatE
)   : RParen
(   : LParen
*   : Mul
7.e15   : FloatE
-87.54e) : Lexical Error, invalid token
)   : RParen
;   : Semicolon
else   : Keyword_else
if   : Keyword_if
(   : LParen
!=   : Neq
x1   : Id
x3   : Id
)   : RParen
x1   : Id
=   : Eq
(   : LParen
+   : Add
(   : LParen
/   : Div
87.54e-9   : FloatE
.5E+) : Lexical Error, invalid token
(   : LParen
*   : Mul
-7.E-  : Lexical Error, invalid token
+87.101e23   : FloatE
)   : RParen
)   : RParen
;   : Semicolon
else   : Keyword_else
x3   : Id
=   : Eq
(   : LParen
+   : Add
(   : LParen
/   : Div
-87.54e-9   : FloatE
+.5E+6   : FloatE
)   : RParen
(   : LParen
*   : Mul
-7.   : Float
+87.e23   : FloatE
)   : RParen
)   : RParen
;   : Semicolon
}   : RBrace
